Acceptance Criteria:

  1. Implement an MVC (Model View Controller) architecture with ExpressJS to separate data handling,
   interface rendering, and routing control.
  2. Implement EJS for server-side templating, providing dynamic HTML generation based on server data.
  3. Utilize ES6 Modules to maintain code modularity and organization.
  4. Use Express sessions for managing user sessions and a cookie-based tracking of the last visit.
  5. Use in-memory data structures for user and job management operations.
  6. Implement a login and registration system, allowing recruiters to create and log into their accounts.
  7. Allow job seekers to view all jobs, view details of a specific job, and apply to a job by providing their details.
  8. Allow recruiters to create, update, delete, and view job postings, 
   with necessary validation for each field in the job posting.
  9. Enable recruiters to view all applicants of a job, including their submitted resume files.
  10. Implement an email system to send confirmation emails to applicants after they apply to a job.
  11. Use middleware for handling authentication, tracking of the last visit,
   file upload processing, and sending confirmation emails.
  12. Store the resume files on the server using a file upload middleware.
  13. Ensure original and high-quality code with comprehensive documentation.


Steps:

  Follow the following steps to build the project.

  DONE 1. Set up an Express.js application and its related configurations.
  DONE 2. Install necessary project dependencies based on the functionalities required.
  3. Configure EJS as the templating engine and create views for job seekers to browse
     DONE - all jobs,
     DONE - view details of a job,
     DONE - apply to jobs, 
     
       and recruiters to
     
     DONE - create,
     DONE - update,
     DONE - delete, and
     DONE - view their job postings.

  4. Create a User model with functions for
     DONE - getting all the users,
     DONE - adding a user,
     DONE - and confirming user login.

  5. Create a User controller to interface with the User model and handle user
     DONE - registration,
     DONE - login,
     DONE - and logout.
  
  6. Create a Job model with functions for
     DONE - creating a new job,
     DONE - retrieving all jobs,
     DONE - finding a job by its id,
     DONE - updating a job,
     DONE - adding a new applicant to a job,
     DONE - retrieving all applicants for a job,
     DONE - and deleting a job.
  
  7. Create a Job controller to interface with the Job model to
     DONE - create,
     DONE - update and
     DONE - delete jobs,
     DONE - and to manage job applicants.
  
  8. Implement routes for
     DONE - user registration,
     DONE - login,
     DONE - logout,
  
  job operations including
  
     DONE - creating,
     DONE - updating,
     DONE - deleting job postings,
     DONE - and to fetch necessary views.
  
  DONE 9. Implement a session based user authentication and management system for recruiters.
  
  10. Set up middleware to 
     DONE - handle resume uploads using Multer,
     DONE - send confirmation emails after applying for a job using Nodemailer, and to
     - track a user's last visit using cookies.
  
  ****11. Document the application explaining
     - functionalities,
     - dependencies, and
     - code organization for easy understanding of the codebase.


Useful Links:

  Video Demonstration: https://youtu.be/z_46m-Rkk28
  Deployment: https://easily-deploy.onrender.com


Additional Tasks:
  
  You can add the following functionality to the project to maximize your score.</h5>

  1. Implement job search functionality to allow users to filter jobs
     with the search input in the navbar.
  DONE 2. Redirect Recruiters to the all jobs page if they are already logged in
          instead of showing login/register options.
  3. Implement resource-based authorization so that only the recruiter
     who posted a job can update or delete it.
  DONE 4. Display the user's last visit date and time on the frontend to provide
     personalized information.
  DONE 5. Add confirmation dialogs for update and delete operations to prevent
          accidental modifications.
  6. Implement a common validation middleware for consistent form validation across the application.
  
  7. Implement pagination for job listings and applicant lists to improve performance.


Hints

  1. Component Structures
  
    DONE - Layouts Page: A common layout view that includes the header, main content, and footer.
    DONE - Landing Page: Showcases a welcome message and provides a brief overview of the job portal.
    DONE - Job Listings Page: Displays all available job postings.
    DONE - Job Details Page: Shows detailed information about a specific job.
    DONE - Applicant List Page: Displays a list of applicants for a specific job.
    DONE - Login Page: Allows recruiters to log in to their accounts.
    DONE - New Job Page: Form for recruiters to create a new job posting.
    DONE - Update Job Page: Form for recruiters to update an existing job posting.
    DONE - 404 Page: Displayed when a requested page is not accessible.
  
  2. Data Structures
    
    DONE a. User

      - id: Unique identifier for each user.
      - name: Name of the user.
      - email: Email address of the user.
      - password: Password for user authentication.

    DONE b. Job

      - id: Unique identifier for each job.
      - job category: Category or type of the job.
      - job designation: Designation of the job.
      - job location: Location of the job.
      - company name: Name of the company offering the job.
      - salary: Salary range for the job.
      - apply by: Application deadline for the job.
      - skills required: Array of required skills for the job.
      - number of openings: Number of available openings for the job.
      - job posted: Date and time when the job was posted.
      - applicants: Array of applicants who have applied for the job, each with their own attributes.

    DONE c. Applicant

      - applicant id: Unique identifier for each applicant.
      - name: Name of the applicant.
      - email: Email address of the applicant.
      - contact: Contact number of the applicant.
      - resumePath: Path to the applicant's resume file.

    d. Additional Info for Reference
  
      - Resource-Based Authentication: This can be achieved by associating each job with the recruiter's ID and checking the authorization before allowing any modifications to the job. Learn more: https://code.pieces.app/blog/role-based-access-systems-in-nodejs  
      - Pagination: Instead of displaying all job listings or applicants on a single page, divide them into smaller pages and provide navigation to move between pages. This helps to load and display data more efficiently.
      DONE - REST API Best Practices: Follow REST API best practices to design your API endpoints. Use appropriate HTTP methods (GET, POST, PUT, DELETE) for different types of operations. Learn more: https://restfulapi.net/resource-naming
      BUG: for the update, using POST instead of PUT*

API Structure

  The API structure for the
   "Easily" job portal project can be organized 
   as follows:

  a. Auth routes

    DONE - POST /register/: Register a new recruiter account
    DONE - GET /: Render the login page
    DONE - POST /login/: Log in as a recruiter
    DONE - POST /logout/: Log out the currently logged-in recruiter

  b. Job routes

    => /jobs

      DONE - GET /: Retrieve all job listings
      DONE - POST /postjob: Renders the form for new job
      DONE - POST /: Create a new job listing
      DONE - GET /:id: Retrieve a specific job listing by ID
      BUG: (Using POST) - PUT /:id: Update a specific job listing by ID
      DONE - DELETE /:id: Delete a specific job listing by ID
  
  DONE Implement the apllicants list page
    => /jobs/:id/applicants

      DONE - GET /: Retrieve all applicants for a specific job listing
      DONE - POST /: Add a new applicant to a specific job listing
      - GET /:applicantId: Retrieve a specific applicant by ID for a job listing
      - PUT /:applicantId: Update a specific applicant by ID for a job listing
      - DELETE /:applicantId: Delete a specific applicant by ID for a job listing
      
    => /jobs/:id/update

      DONE - GET /: Render the update form for a specific job listing
      DONE - POST /: Update a specific job listing by ID

    => /jobs/:id/delete
    
      DONE - GET /: Delete a specific job listing by ID
  
    => /apply/:id
    
      DONE - POST /: Apply to a specific job listing by ID, uploading a resume
    
    => /404
      
      DONE - GET /: Render the 404 error page

Evaluation Criteria:

  a. ExpressJS & MVC Setup -> Max score: 50
    - Implement MVC architecture with ExpressJS to separate data handling, interface rendering, and routing control, Utilize ES6 Modules to maintain code modularity and organization. 

  b. Route Creation -> Max score: 100
    - Implement routes for user registration, login, and logout operations, Implement routes for job operations including creating, updating, and deleting job postings, Implement routes to fetch views for job seekers and recruiters, Create wildcard route to navigate user to not found pages for inaccessible urls.  </div></div>

  c. Middleware Integration -> Max score: 100
    - Use Express sessions for managing user sessions and implementing authentication,
    Implement middleware for sending HTML-based confirmation emails,
    Implement middleware for handling file uploads,
    Implement cookie-based middleware for tracking the user's last visit.
    
  d.EJS UI Integration -> Max score: 75
    - Configure EJS as the templating engine and create views for the application,
    Create views for job seekers to browse all jobs,
    view job details, and apply for jobs, Create views for recruiters to create,
    update, delete, and view job postings.
  
  e. In-Memory Data Structure Operations -> Max score: 75
    - Use in-memory data structures for user and job management operations,
    Implement functionalities in User model including user registration,
    login, and logout, Implement functionalities in Job model including create,
    read, update, delete operations and managing applicants.
  
  f. Additional Tasks -> Max score: 50
    - Implement all the addtional tasks.
    
  g. Innovation -> Max score: 50
    - Innovative use of Node.js and Express.js features and best practices
    for performance optimization, Innovative user interface and user experience
    without relying on external dependencies.